<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/routers/user_router.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/routers/user_router.py" />
              <option name="originalContent" value="from fastapi import APIRouter, HTTPException&#10;from typing import List&#10;from app.schemas.user_schema import User, UserResponse&#10;from app.controllers.user_controller import create_user, get_all_users, get_user_by_nome, get_user_by_email, delete_user_by_id, login_user&#10;from pydantic import BaseModel, EmailStr, Field&#10;&#10;router = APIRouter(prefix=&quot;/users&quot;, tags=[&quot;users&quot;])&#10;&#10;class LoginRequest(BaseModel):&#10;    email: EmailStr = Field(..., description=&quot;E-mail do usuário&quot;)&#10;    senha: str = Field(..., min_length=1, description=&quot;Senha do usuário&quot;)&#10;&#10;@router.post(&quot;/login&quot;, response_model=UserResponse)&#10;async def login(login_data: LoginRequest):&#10;    return await login_user(login_data.email, login_data.senha)&#10;&#10;@router.post(&quot;/&quot;, status_code=201, response_model=UserResponse)&#10;async def register_user(user: User):&#10;    return await create_user(user)&#10;&#10;@router.get(&quot;/&quot;, response_model=List[UserResponse])&#10;async def get_users():&#10;    return await get_all_users()&#10;&#10;@router.get(&quot;/get/nome/{nome}&quot;, response_model=List[UserResponse])&#10;async def get_users_by_nome(nome: str):&#10;    return await get_user_by_nome(nome)&#10;&#10;@router.get(&quot;/get/email/{email}&quot;, response_model=UserResponse)&#10;async def get_user_by_email_route(email: str):&#10;    return await get_user_by_email(email)&#10;&#10;@router.delete(&quot;/{user_id}&quot;)&#10;async def delete_user(user_id: str):&#10;    return await delete_user_by_id(user_id)&#10;" />
              <option name="updatedContent" value="from fastapi import APIRouter, HTTPException, Depends&#10;from typing import List&#10;from app.schemas.user_schema import User, UserResponse&#10;from app.controllers.user_controller import create_user, get_all_users, get_user_by_nome, get_user_by_email, delete_user_by_id, login_user, get_current_user, update_user&#10;from pydantic import BaseModel, EmailStr, Field&#10;&#10;router = APIRouter(prefix=&quot;/users&quot;, tags=[&quot;users&quot;])&#10;&#10;class LoginRequest(BaseModel):&#10;    email: EmailStr = Field(..., description=&quot;E-mail do usuário&quot;)&#10;    senha: str = Field(..., min_length=1, description=&quot;Senha do usuário&quot;)&#10;&#10;class UpdateUserRequest(BaseModel):&#10;    email: EmailStr = Field(..., description=&quot;Novo e-mail do usuário&quot;)&#10;    senha: str = Field(..., min_length=1, description=&quot;Nova senha do usuário&quot;)&#10;&#10;@router.post(&quot;/login&quot;, response_model=None)&#10;async def login(login_data: LoginRequest):&#10;    return await login_user(login_data.email, login_data.senha)&#10;&#10;@router.post(&quot;/&quot;, status_code=201, response_model=UserResponse)&#10;async def register_user(user: User):&#10;    return await create_user(user)&#10;&#10;@router.get(&quot;/&quot;, response_model=List[UserResponse])&#10;async def get_users():&#10;    return await get_all_users()&#10;&#10;@router.get(&quot;/get/nome/{nome}&quot;, response_model=List[UserResponse])&#10;async def get_users_by_nome(nome: str):&#10;    return await get_user_by_nome(nome)&#10;&#10;@router.get(&quot;/get/email/{email}&quot;, response_model=UserResponse)&#10;async def get_user_by_email_route(email: str):&#10;    return await get_user_by_email(email)&#10;&#10;@router.delete(&quot;/{user_id}&quot;)&#10;async def delete_user(user_id: str, user=Depends(get_current_user)):&#10;    return await delete_user_by_id(user_id)&#10;&#10;@router.put(&quot;/{user_id}&quot;, response_model=UserResponse)&#10;async def update_user_route(user_id: str, update_data: UpdateUserRequest, user=Depends(get_current_user)):&#10;    return await update_user(user_id, update_data.email, update_data.senha)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>